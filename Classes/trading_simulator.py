# -*- coding: utf-8 -*-
"""Trading_Main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TeHBSMy8ntsAmzV2Nqj3VPAGx0AtbCF3
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader.data as web
import datetime

class account():

  #start an account with initial cash(int), a start date(numpy.datetime), and a colloction of stocks(dic: {'stock name': dateframe})
  def __init__(self,money,time,StockData,AbleToShort=True,PrintRecord=True):
    self.money=money
    self.time=time
    self.start_time=time
    self.stocks=pd.DataFrame([],columns=['stock','volume'])
    self.AbleToShort=AbleToShort
    self.TradeRecord=pd.DataFrame([],columns=['time','Buy|Sell','stock','price','volume','money','asset'])
    self.MoneyRecord=pd.DataFrame([[money]],columns=['money'])
    self.StockData=StockData
    self.TimeLine=self.StockData[list(self.StockData.keys())[0]].loc[self.start_time:].index.values
    self.TimeIndex=0
    self.PrintRecord=PrintRecord

  # increase the date by i days
  def IncementDay(self,i=1):
    #i=1 means going to the next trading day
    self.TimeIndex+=i
    self.time=self.TimeLine[self.TimeIndex]

  # output current(if incre==0) date
  def CheckDate(self,incre=0):
    #0 means to check today's date
    incre=self.TimeIndex+incre
    return self.TimeLine[incre]

  #output the stock you current possess and the amount of cash you hold
  def CheckAccount(self):
    return self.stocks,self.money

  def CheckMoney(self):
    return self.money

  #Buy a certain volume of a stock, if price is not specified, it is the stock price of the current day
  def Buy(self,stock,volume,price=None,time=None):
    if price==None:
      price=self.CheckCurrentValue(stock,'Adj Close')
    if time==None:
      time=self.time
    if self.money<price*volume:
      print("Can't buy with no money")
      return 0
      
    else:
      self.money=self.money-price*volume
      self.MoneyRecord.append(pd.DataFrame([[self.money]],columns=['money']))
      if stock in self.stocks['stock'].values:
        index=self.stocks.index[self.stocks['stock'] == stock].tolist()[0]
        self.stocks.loc[index]['volume']+=volume
      else:
        self.stocks=self.stocks.append(pd.DataFrame([[stock,volume]],columns=['stock','volume']))
        self.stocks=self.stocks.set_index(np.arange(0,self.stocks.shape[0]))
      if self.PrintRecord==True:
        txt='{} Bought {} shares of {} stock at price {}'.format(self.time,volume,stock,price)
        print(txt)
      self.TradeRecord=self.TradeRecord.append(pd.DataFrame([[time,'Buy',stock,price,volume,self.money,self.TotalAsset()]],columns=['time','Buy|Sell','stock','price','volume','money','asset']))

  #Sell a certain volume of a stock, if price is not specified, it is the stock price of the current day
  def Sell(self,stock,volume,price=None,time=None):
    if price==None:
      price=self.CheckCurrentValue(stock,'Adj Close')
    if time==None:
      time=self.time
    if self.AbleToShort==True:
      self.money=self.money+price*volume
      self.MoneyRecord.append(pd.DataFrame([[self.money]],columns=['money']))
      if stock in self.stocks['stock'].values:
        
        index=self.stocks.index[self.stocks['stock'] == stock].tolist()[0]
        self.stocks.loc[index]['volume']-=volume
        
      else:
        
        self.stocks=self.stocks.append(pd.DataFrame([[stock,-volume]],columns=['stock','volume']))
        self.stocks=self.stocks.set_index(np.arange(0,self.stocks.shape[0]))

      if self.PrintRecord==True:
        txt='{} Sold {} shares of {} stock at price {}'.format(self.time,volume,stock,price)
        print(txt)
      self.TradeRecord=self.TradeRecord.append(pd.DataFrame([[time,'Sell',stock,price,-volume,self.money,self.TotalAsset()]],columns=['time','Buy|Sell','stock','price','volume','money','asset']))
      
    if self.AbleToShort==False:
      if stock in self.stocks['stock'].values:
        index=self.stocks.index[self.stocks['stock'] == stock].tolist()[0]
        if self.stocks.loc[index]['volume']>=volume:
          self.stocks.loc[index]['volume']-=volume
          self.money=self.money+price*volume
          self.MoneyRecord.append(pd.DataFrame([[self.money]],columns=['money']))
          
          if self.PrintRecord==True:
            txt='{} Sold {} shares of {} stock at price {}'.format(self.time,volume,stock,price)
            print(txt)
          self.TradeRecord=self.TradeRecord.append(pd.DataFrame([[time,'Sell',stock,price,-volume,self.money,self.TotalAsset()]],columns=['time','Buy|Sell','stock','price','volume','money','asset']))
            
        else:
          print('Not able to sell stocks you do not have')
          return 0
      else:
        print('Not able to sell stocks you do not have')
        return 0

  #output the total amount of asset you have (aka stock value+cash)
  # if time is not specified, it outputs the asset of the current day
  def TotalAsset(self,time=None):
    if time==None:
      time=self.time
    StockAsset=0
    for i in range(self.stocks.shape[0]):
      stock=self.stocks.iloc[i]['stock']
      price=self.StockData[stock].loc[time]['Adj Close']
      StockAsset+=price*self.stocks.iloc[i]['volume']
    return self.money+StockAsset

  #Clear account, sell all the stocks you are holding and repay all the debt
  def Clear(self):
    for i in range(self.stocks.shape[0]):
      stock=self.stocks.iloc[i]['stock']
      volume=self.stocks.iloc[i]['volume']
      if volume>0.0:
        self.Sell(stock,volume)
      if volume<0.0:
        self.Buy(stock,-volume)
    return 0
  
  # Check the value of a stock at the current time
  # value can be: 'High' 'Low' 'Open' 'Close' 'Adj Close' 'Volume'
  def CheckCurrentValue(self,stock,value='Adj Close'):

    return self.StockData[stock].loc[self.time][value]

  # Check the value of a stock at a given time
  # value can be: 'High' 'Low' 'Open' 'Close' 'Adj Close' 'Volume'
  def CheckValue(self,stock,time,variable):
    return self.StockData['stock'].loc[time][variable]

  # show all records of buy and sell from the start to now in pd.DataFrame format
  def ShowTradeRecord(self):
    self.TradeRecord=self.TradeRecord.set_index(np.arange(0,self.TradeRecord.shape[0]))
    return self.TradeRecord
  

          
          

